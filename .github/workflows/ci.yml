name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci-backend:
    name: Backend CI
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lifebalance
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential libffi-dev libpq-dev postgresql-client

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h 127.0.0.1 -p 5432 -U postgres && break
            echo "Postgres is unavailable - sleeping" && sleep 2
          done

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest-cov

      - name: Lint (flake8)
        run: flake8 . --max-line-length=120

      - name: Test with coverage (pytest)
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/lifebalance
        run: |
          mkdir -p test-results
          pytest -q \
            --cov=app \
            --cov-report=xml:test-results/coverage.xml \
            --junitxml=test-results/junit.xml

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-reports
          path: backend/test-results/*
          if-no-files-found: error
          retention-days: 7

  ci-frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint (eslint)
        run: |
          # Run project lint script if present; otherwise try eslint via npx
          npm run -s lint --if-present || npx --yes eslint@9 . || echo "ESLint not configured; skipping"

      - name: Test (npm test)
        run: |
          mkdir -p test-results
          # Run tests if a test script is defined; otherwise skip
          npm test --if-present || echo "No test script; skipping"

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-reports
          path: frontend/test-results/*
          if-no-files-found: ignore
          retention-days: 7

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [ci-backend, ci-frontend]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build images (backend and frontend)
        env:
          TAG_BACKEND: selfinity/backend:local-${{ github.sha }}
          TAG_FRONTEND: selfinity/frontend:local-${{ github.sha }}
        run: |
          set -euxo pipefail
          DOCKER_BUILDKIT=1 docker build -t "$TAG_BACKEND" -f backend/Dockerfile backend
          DOCKER_BUILDKIT=1 docker build -t "$TAG_FRONTEND" -f frontend/Dockerfile frontend

      - name: Inspect images and save metadata
        env:
          TAG_BACKEND: selfinity/backend:local-${{ github.sha }}
          TAG_FRONTEND: selfinity/frontend:local-${{ github.sha }}
        run: |
          set -euo pipefail
          mkdir -p docker-inspect
          docker inspect "$TAG_BACKEND" > docker-inspect/backend.json
          docker inspect "$TAG_FRONTEND" > docker-inspect/frontend.json

      - name: Upload inspect artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-inspect
          path: docker-inspect/*
          if-no-files-found: error

      - name: Log in to DockerHub
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Tag Docker image for DockerHub
        if: github.event_name == 'push'
        run: |
          docker tag \
            selfinity/backend:local-${{ github.sha }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/selfinity:latest

      - name: Push Docker image
        if: github.event_name == 'push'
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/selfinity:latest
